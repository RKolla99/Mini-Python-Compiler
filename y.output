Terminals unused in grammar

   IN
   RETURN
   OB
   CB


State 20 conflicts: 2 shift/reduce
State 38 conflicts: 2 reduce/reduce
State 59 conflicts: 2 shift/reduce
State 60 conflicts: 2 shift/reduce
State 66 conflicts: 2 reduce/reduce
State 67 conflicts: 2 reduce/reduce


Grammar

    0 $accept: startparse $end

    1 startparse: start ENDFILE

    2 start: NEWLINE start
    3      | statements NEWLINE start
    4      | statements NEWLINE

    5 constant: NUMBER
    6         | STRING

    7 term: ID
    8     | constant

    9 expressions: arith_expr
   10            | bool_expr

   11 arith_expr: term
   12           | arith_expr PL arith_expr
   13           | arith_expr MN arith_expr
   14           | arith_expr ML arith_expr
   15           | arith_expr DV arith_expr

   16 relational_op: GT
   17              | LT
   18              | GE
   19              | LE

   20 bool_expr: TRUE
   21          | FALSE
   22          | OP bool_expr CP
   23          | arith_expr relational_op arith_expr
   24          | bool_expr AND bool_expr
   25          | bool_expr OR bool_expr
   26          | NOT bool_expr
   27          | expressions EE expressions
   28          | expressions NE expressions

   29 import_stmt: IMPORT ID

   30 pass_stmt: PASS

   31 break_stmt: BREAK

   32 assign_stmt: ID EQL expressions

   33 if_stmt: IF bool_expr COLON start_suite elif_stmts

   34 elif_stmts: ELIF bool_expr COLON start_suite elif_stmts
   35           | else_stmt

   36 else_stmt: ELSE COLON start_suite

   37 while_stmt: WHILE bool_expr COLON start_suite

   38 basic_stmt: import_stmt
   39           | pass_stmt
   40           | break_stmt
   41           | assign_stmt
   42           | expressions

   43 cmpd_stmt: if_stmt
   44          | while_stmt

   45 statements: basic_stmt
   46           | cmpd_stmt

   47 start_suite: basic_stmt
   48            | NEWLINE INDENT statements suite

   49 suite: NEWLINE NOCHANGE statements suite
   50      | NEWLINE end_suite

   51 end_suite: DEDENT statements
   52          | %empty


Terminals, with rules where they appear

$end (0) 0
error (256)
NOCHANGE (258) 49
NEWLINE (259) 2 3 4 48 49 50
DEDENT (260) 51
INDENT (261) 48
IMPORT (262) 29
WHILE (263) 37
IF (264) 33
ELIF (265) 34
ELSE (266) 36
IN (267)
PASS (268) 30
BREAK (269) 31
RETURN (270)
COLON (271) 33 34 36 37
GT (272) 16
LT (273) 17
GE (274) 18
LE (275) 19
EE (276) 27
NE (277) 28
TRUE (278) 20
FALSE (279) 21
OP (280) 22
CP (281) 22
OB (282)
CB (283)
NUMBER (284) 5
ID (285) 7 29 32
STRING (286) 6
ENDFILE (287) 1
EQL (288) 32
PL (289) 12
MN (290) 13
ML (291) 14
DV (292) 15
NOT (293) 26
AND (294) 24
OR (295) 25


Nonterminals, with rules where they appear

$accept (41)
    on left: 0
startparse (42)
    on left: 1, on right: 0
start (43)
    on left: 2 3 4, on right: 1 2 3
constant (44)
    on left: 5 6, on right: 8
term (45)
    on left: 7 8, on right: 11
expressions (46)
    on left: 9 10, on right: 27 28 32 42
arith_expr (47)
    on left: 11 12 13 14 15, on right: 9 12 13 14 15 23
relational_op (48)
    on left: 16 17 18 19, on right: 23
bool_expr (49)
    on left: 20 21 22 23 24 25 26 27 28, on right: 10 22 24 25 26 33
    34 37
import_stmt (50)
    on left: 29, on right: 38
pass_stmt (51)
    on left: 30, on right: 39
break_stmt (52)
    on left: 31, on right: 40
assign_stmt (53)
    on left: 32, on right: 41
if_stmt (54)
    on left: 33, on right: 43
elif_stmts (55)
    on left: 34 35, on right: 33 34
else_stmt (56)
    on left: 36, on right: 35
while_stmt (57)
    on left: 37, on right: 44
basic_stmt (58)
    on left: 38 39 40 41 42, on right: 45 47
cmpd_stmt (59)
    on left: 43 44, on right: 46
statements (60)
    on left: 45 46, on right: 3 4 48 49 51
start_suite (61)
    on left: 47 48, on right: 33 34 36 37
suite (62)
    on left: 49 50, on right: 48 49
end_suite (63)
    on left: 51 52, on right: 50


State 0

    0 $accept: . startparse $end

    NEWLINE  shift, and go to state 1
    IMPORT   shift, and go to state 2
    WHILE    shift, and go to state 3
    IF       shift, and go to state 4
    PASS     shift, and go to state 5
    BREAK    shift, and go to state 6
    TRUE     shift, and go to state 7
    FALSE    shift, and go to state 8
    OP       shift, and go to state 9
    NUMBER   shift, and go to state 10
    ID       shift, and go to state 11
    STRING   shift, and go to state 12
    NOT      shift, and go to state 13

    startparse   go to state 14
    start        go to state 15
    constant     go to state 16
    term         go to state 17
    expressions  go to state 18
    arith_expr   go to state 19
    bool_expr    go to state 20
    import_stmt  go to state 21
    pass_stmt    go to state 22
    break_stmt   go to state 23
    assign_stmt  go to state 24
    if_stmt      go to state 25
    while_stmt   go to state 26
    basic_stmt   go to state 27
    cmpd_stmt    go to state 28
    statements   go to state 29


State 1

    2 start: NEWLINE . start

    NEWLINE  shift, and go to state 1
    IMPORT   shift, and go to state 2
    WHILE    shift, and go to state 3
    IF       shift, and go to state 4
    PASS     shift, and go to state 5
    BREAK    shift, and go to state 6
    TRUE     shift, and go to state 7
    FALSE    shift, and go to state 8
    OP       shift, and go to state 9
    NUMBER   shift, and go to state 10
    ID       shift, and go to state 11
    STRING   shift, and go to state 12
    NOT      shift, and go to state 13

    start        go to state 30
    constant     go to state 16
    term         go to state 17
    expressions  go to state 18
    arith_expr   go to state 19
    bool_expr    go to state 20
    import_stmt  go to state 21
    pass_stmt    go to state 22
    break_stmt   go to state 23
    assign_stmt  go to state 24
    if_stmt      go to state 25
    while_stmt   go to state 26
    basic_stmt   go to state 27
    cmpd_stmt    go to state 28
    statements   go to state 29


State 2

   29 import_stmt: IMPORT . ID

    ID  shift, and go to state 31


State 3

   37 while_stmt: WHILE . bool_expr COLON start_suite

    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 32
    STRING  shift, and go to state 12
    NOT     shift, and go to state 13

    constant     go to state 16
    term         go to state 17
    expressions  go to state 33
    arith_expr   go to state 19
    bool_expr    go to state 34


State 4

   33 if_stmt: IF . bool_expr COLON start_suite elif_stmts

    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 32
    STRING  shift, and go to state 12
    NOT     shift, and go to state 13

    constant     go to state 16
    term         go to state 17
    expressions  go to state 33
    arith_expr   go to state 19
    bool_expr    go to state 35


State 5

   30 pass_stmt: PASS .

    $default  reduce using rule 30 (pass_stmt)


State 6

   31 break_stmt: BREAK .

    $default  reduce using rule 31 (break_stmt)


State 7

   20 bool_expr: TRUE .

    $default  reduce using rule 20 (bool_expr)


State 8

   21 bool_expr: FALSE .

    $default  reduce using rule 21 (bool_expr)


State 9

   22 bool_expr: OP . bool_expr CP

    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 32
    STRING  shift, and go to state 12
    NOT     shift, and go to state 13

    constant     go to state 16
    term         go to state 17
    expressions  go to state 33
    arith_expr   go to state 19
    bool_expr    go to state 36


State 10

    5 constant: NUMBER .

    $default  reduce using rule 5 (constant)


State 11

    7 term: ID .
   32 assign_stmt: ID . EQL expressions

    EQL  shift, and go to state 37

    $default  reduce using rule 7 (term)


State 12

    6 constant: STRING .

    $default  reduce using rule 6 (constant)


State 13

   26 bool_expr: NOT . bool_expr

    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 32
    STRING  shift, and go to state 12
    NOT     shift, and go to state 13

    constant     go to state 16
    term         go to state 17
    expressions  go to state 33
    arith_expr   go to state 19
    bool_expr    go to state 38


State 14

    0 $accept: startparse . $end

    $end  shift, and go to state 39


State 15

    1 startparse: start . ENDFILE

    ENDFILE  shift, and go to state 40


State 16

    8 term: constant .

    $default  reduce using rule 8 (term)


State 17

   11 arith_expr: term .

    $default  reduce using rule 11 (arith_expr)


State 18

   27 bool_expr: expressions . EE expressions
   28          | expressions . NE expressions
   42 basic_stmt: expressions .

    EE  shift, and go to state 41
    NE  shift, and go to state 42

    $default  reduce using rule 42 (basic_stmt)


State 19

    9 expressions: arith_expr .
   12 arith_expr: arith_expr . PL arith_expr
   13           | arith_expr . MN arith_expr
   14           | arith_expr . ML arith_expr
   15           | arith_expr . DV arith_expr
   23 bool_expr: arith_expr . relational_op arith_expr

    GT  shift, and go to state 43
    LT  shift, and go to state 44
    GE  shift, and go to state 45
    LE  shift, and go to state 46
    PL  shift, and go to state 47
    MN  shift, and go to state 48
    ML  shift, and go to state 49
    DV  shift, and go to state 50

    $default  reduce using rule 9 (expressions)

    relational_op  go to state 51


State 20

   10 expressions: bool_expr .
   24 bool_expr: bool_expr . AND bool_expr
   25          | bool_expr . OR bool_expr

    AND  shift, and go to state 52
    OR   shift, and go to state 53

    AND       [reduce using rule 10 (expressions)]
    OR        [reduce using rule 10 (expressions)]
    $default  reduce using rule 10 (expressions)


State 21

   38 basic_stmt: import_stmt .

    $default  reduce using rule 38 (basic_stmt)


State 22

   39 basic_stmt: pass_stmt .

    $default  reduce using rule 39 (basic_stmt)


State 23

   40 basic_stmt: break_stmt .

    $default  reduce using rule 40 (basic_stmt)


State 24

   41 basic_stmt: assign_stmt .

    $default  reduce using rule 41 (basic_stmt)


State 25

   43 cmpd_stmt: if_stmt .

    $default  reduce using rule 43 (cmpd_stmt)


State 26

   44 cmpd_stmt: while_stmt .

    $default  reduce using rule 44 (cmpd_stmt)


State 27

   45 statements: basic_stmt .

    $default  reduce using rule 45 (statements)


State 28

   46 statements: cmpd_stmt .

    $default  reduce using rule 46 (statements)


State 29

    3 start: statements . NEWLINE start
    4      | statements . NEWLINE

    NEWLINE  shift, and go to state 54


State 30

    2 start: NEWLINE start .

    $default  reduce using rule 2 (start)


State 31

   29 import_stmt: IMPORT ID .

    $default  reduce using rule 29 (import_stmt)


State 32

    7 term: ID .

    $default  reduce using rule 7 (term)


State 33

   27 bool_expr: expressions . EE expressions
   28          | expressions . NE expressions

    EE  shift, and go to state 41
    NE  shift, and go to state 42


State 34

   10 expressions: bool_expr .
   24 bool_expr: bool_expr . AND bool_expr
   25          | bool_expr . OR bool_expr
   37 while_stmt: WHILE bool_expr . COLON start_suite

    COLON  shift, and go to state 55
    AND    shift, and go to state 52
    OR     shift, and go to state 53

    $default  reduce using rule 10 (expressions)


State 35

   10 expressions: bool_expr .
   24 bool_expr: bool_expr . AND bool_expr
   25          | bool_expr . OR bool_expr
   33 if_stmt: IF bool_expr . COLON start_suite elif_stmts

    COLON  shift, and go to state 56
    AND    shift, and go to state 52
    OR     shift, and go to state 53

    $default  reduce using rule 10 (expressions)


State 36

   10 expressions: bool_expr .
   22 bool_expr: OP bool_expr . CP
   24          | bool_expr . AND bool_expr
   25          | bool_expr . OR bool_expr

    CP   shift, and go to state 57
    AND  shift, and go to state 52
    OR   shift, and go to state 53

    $default  reduce using rule 10 (expressions)


State 37

   32 assign_stmt: ID EQL . expressions

    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 32
    STRING  shift, and go to state 12
    NOT     shift, and go to state 13

    constant     go to state 16
    term         go to state 17
    expressions  go to state 58
    arith_expr   go to state 19
    bool_expr    go to state 20


State 38

   10 expressions: bool_expr .
   24 bool_expr: bool_expr . AND bool_expr
   25          | bool_expr . OR bool_expr
   26          | NOT bool_expr .

    AND  shift, and go to state 52
    OR   shift, and go to state 53

    EE        reduce using rule 10 (expressions)
    EE        [reduce using rule 26 (bool_expr)]
    NE        reduce using rule 10 (expressions)
    NE        [reduce using rule 26 (bool_expr)]
    $default  reduce using rule 26 (bool_expr)


State 39

    0 $accept: startparse $end .

    $default  accept


State 40

    1 startparse: start ENDFILE .

    $default  reduce using rule 1 (startparse)


State 41

   27 bool_expr: expressions EE . expressions

    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 32
    STRING  shift, and go to state 12
    NOT     shift, and go to state 13

    constant     go to state 16
    term         go to state 17
    expressions  go to state 59
    arith_expr   go to state 19
    bool_expr    go to state 20


State 42

   28 bool_expr: expressions NE . expressions

    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 32
    STRING  shift, and go to state 12
    NOT     shift, and go to state 13

    constant     go to state 16
    term         go to state 17
    expressions  go to state 60
    arith_expr   go to state 19
    bool_expr    go to state 20


State 43

   16 relational_op: GT .

    $default  reduce using rule 16 (relational_op)


State 44

   17 relational_op: LT .

    $default  reduce using rule 17 (relational_op)


State 45

   18 relational_op: GE .

    $default  reduce using rule 18 (relational_op)


State 46

   19 relational_op: LE .

    $default  reduce using rule 19 (relational_op)


State 47

   12 arith_expr: arith_expr PL . arith_expr

    NUMBER  shift, and go to state 10
    ID      shift, and go to state 32
    STRING  shift, and go to state 12

    constant    go to state 16
    term        go to state 17
    arith_expr  go to state 61


State 48

   13 arith_expr: arith_expr MN . arith_expr

    NUMBER  shift, and go to state 10
    ID      shift, and go to state 32
    STRING  shift, and go to state 12

    constant    go to state 16
    term        go to state 17
    arith_expr  go to state 62


State 49

   14 arith_expr: arith_expr ML . arith_expr

    NUMBER  shift, and go to state 10
    ID      shift, and go to state 32
    STRING  shift, and go to state 12

    constant    go to state 16
    term        go to state 17
    arith_expr  go to state 63


State 50

   15 arith_expr: arith_expr DV . arith_expr

    NUMBER  shift, and go to state 10
    ID      shift, and go to state 32
    STRING  shift, and go to state 12

    constant    go to state 16
    term        go to state 17
    arith_expr  go to state 64


State 51

   23 bool_expr: arith_expr relational_op . arith_expr

    NUMBER  shift, and go to state 10
    ID      shift, and go to state 32
    STRING  shift, and go to state 12

    constant    go to state 16
    term        go to state 17
    arith_expr  go to state 65


State 52

   24 bool_expr: bool_expr AND . bool_expr

    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 32
    STRING  shift, and go to state 12
    NOT     shift, and go to state 13

    constant     go to state 16
    term         go to state 17
    expressions  go to state 33
    arith_expr   go to state 19
    bool_expr    go to state 66


State 53

   25 bool_expr: bool_expr OR . bool_expr

    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 32
    STRING  shift, and go to state 12
    NOT     shift, and go to state 13

    constant     go to state 16
    term         go to state 17
    expressions  go to state 33
    arith_expr   go to state 19
    bool_expr    go to state 67


State 54

    3 start: statements NEWLINE . start
    4      | statements NEWLINE .

    NEWLINE  shift, and go to state 1
    IMPORT   shift, and go to state 2
    WHILE    shift, and go to state 3
    IF       shift, and go to state 4
    PASS     shift, and go to state 5
    BREAK    shift, and go to state 6
    TRUE     shift, and go to state 7
    FALSE    shift, and go to state 8
    OP       shift, and go to state 9
    NUMBER   shift, and go to state 10
    ID       shift, and go to state 11
    STRING   shift, and go to state 12
    NOT      shift, and go to state 13

    $default  reduce using rule 4 (start)

    start        go to state 68
    constant     go to state 16
    term         go to state 17
    expressions  go to state 18
    arith_expr   go to state 19
    bool_expr    go to state 20
    import_stmt  go to state 21
    pass_stmt    go to state 22
    break_stmt   go to state 23
    assign_stmt  go to state 24
    if_stmt      go to state 25
    while_stmt   go to state 26
    basic_stmt   go to state 27
    cmpd_stmt    go to state 28
    statements   go to state 29


State 55

   37 while_stmt: WHILE bool_expr COLON . start_suite

    NEWLINE  shift, and go to state 69
    IMPORT   shift, and go to state 2
    PASS     shift, and go to state 5
    BREAK    shift, and go to state 6
    TRUE     shift, and go to state 7
    FALSE    shift, and go to state 8
    OP       shift, and go to state 9
    NUMBER   shift, and go to state 10
    ID       shift, and go to state 11
    STRING   shift, and go to state 12
    NOT      shift, and go to state 13

    constant     go to state 16
    term         go to state 17
    expressions  go to state 18
    arith_expr   go to state 19
    bool_expr    go to state 20
    import_stmt  go to state 21
    pass_stmt    go to state 22
    break_stmt   go to state 23
    assign_stmt  go to state 24
    basic_stmt   go to state 70
    start_suite  go to state 71


State 56

   33 if_stmt: IF bool_expr COLON . start_suite elif_stmts

    NEWLINE  shift, and go to state 69
    IMPORT   shift, and go to state 2
    PASS     shift, and go to state 5
    BREAK    shift, and go to state 6
    TRUE     shift, and go to state 7
    FALSE    shift, and go to state 8
    OP       shift, and go to state 9
    NUMBER   shift, and go to state 10
    ID       shift, and go to state 11
    STRING   shift, and go to state 12
    NOT      shift, and go to state 13

    constant     go to state 16
    term         go to state 17
    expressions  go to state 18
    arith_expr   go to state 19
    bool_expr    go to state 20
    import_stmt  go to state 21
    pass_stmt    go to state 22
    break_stmt   go to state 23
    assign_stmt  go to state 24
    basic_stmt   go to state 70
    start_suite  go to state 72


State 57

   22 bool_expr: OP bool_expr CP .

    $default  reduce using rule 22 (bool_expr)


State 58

   27 bool_expr: expressions . EE expressions
   28          | expressions . NE expressions
   32 assign_stmt: ID EQL expressions .

    EE  shift, and go to state 41
    NE  shift, and go to state 42

    $default  reduce using rule 32 (assign_stmt)


State 59

   27 bool_expr: expressions . EE expressions
   27          | expressions EE expressions .
   28          | expressions . NE expressions

    EE  shift, and go to state 41
    NE  shift, and go to state 42

    EE        [reduce using rule 27 (bool_expr)]
    NE        [reduce using rule 27 (bool_expr)]
    $default  reduce using rule 27 (bool_expr)


State 60

   27 bool_expr: expressions . EE expressions
   28          | expressions . NE expressions
   28          | expressions NE expressions .

    EE  shift, and go to state 41
    NE  shift, and go to state 42

    EE        [reduce using rule 28 (bool_expr)]
    NE        [reduce using rule 28 (bool_expr)]
    $default  reduce using rule 28 (bool_expr)


State 61

   12 arith_expr: arith_expr . PL arith_expr
   12           | arith_expr PL arith_expr .
   13           | arith_expr . MN arith_expr
   14           | arith_expr . ML arith_expr
   15           | arith_expr . DV arith_expr

    ML  shift, and go to state 49
    DV  shift, and go to state 50

    $default  reduce using rule 12 (arith_expr)


State 62

   12 arith_expr: arith_expr . PL arith_expr
   13           | arith_expr . MN arith_expr
   13           | arith_expr MN arith_expr .
   14           | arith_expr . ML arith_expr
   15           | arith_expr . DV arith_expr

    ML  shift, and go to state 49
    DV  shift, and go to state 50

    $default  reduce using rule 13 (arith_expr)


State 63

   12 arith_expr: arith_expr . PL arith_expr
   13           | arith_expr . MN arith_expr
   14           | arith_expr . ML arith_expr
   14           | arith_expr ML arith_expr .
   15           | arith_expr . DV arith_expr

    $default  reduce using rule 14 (arith_expr)


State 64

   12 arith_expr: arith_expr . PL arith_expr
   13           | arith_expr . MN arith_expr
   14           | arith_expr . ML arith_expr
   15           | arith_expr . DV arith_expr
   15           | arith_expr DV arith_expr .

    $default  reduce using rule 15 (arith_expr)


State 65

   12 arith_expr: arith_expr . PL arith_expr
   13           | arith_expr . MN arith_expr
   14           | arith_expr . ML arith_expr
   15           | arith_expr . DV arith_expr
   23 bool_expr: arith_expr relational_op arith_expr .

    PL  shift, and go to state 47
    MN  shift, and go to state 48
    ML  shift, and go to state 49
    DV  shift, and go to state 50

    $default  reduce using rule 23 (bool_expr)


State 66

   10 expressions: bool_expr .
   24 bool_expr: bool_expr . AND bool_expr
   24          | bool_expr AND bool_expr .
   25          | bool_expr . OR bool_expr

    OR  shift, and go to state 53

    EE        reduce using rule 10 (expressions)
    EE        [reduce using rule 24 (bool_expr)]
    NE        reduce using rule 10 (expressions)
    NE        [reduce using rule 24 (bool_expr)]
    $default  reduce using rule 24 (bool_expr)


State 67

   10 expressions: bool_expr .
   24 bool_expr: bool_expr . AND bool_expr
   25          | bool_expr . OR bool_expr
   25          | bool_expr OR bool_expr .

    EE        reduce using rule 10 (expressions)
    EE        [reduce using rule 25 (bool_expr)]
    NE        reduce using rule 10 (expressions)
    NE        [reduce using rule 25 (bool_expr)]
    $default  reduce using rule 25 (bool_expr)


State 68

    3 start: statements NEWLINE start .

    $default  reduce using rule 3 (start)


State 69

   48 start_suite: NEWLINE . INDENT statements suite

    INDENT  shift, and go to state 73


State 70

   47 start_suite: basic_stmt .

    $default  reduce using rule 47 (start_suite)


State 71

   37 while_stmt: WHILE bool_expr COLON start_suite .

    $default  reduce using rule 37 (while_stmt)


State 72

   33 if_stmt: IF bool_expr COLON start_suite . elif_stmts

    ELIF  shift, and go to state 74
    ELSE  shift, and go to state 75

    elif_stmts  go to state 76
    else_stmt   go to state 77


State 73

   48 start_suite: NEWLINE INDENT . statements suite

    IMPORT  shift, and go to state 2
    WHILE   shift, and go to state 3
    IF      shift, and go to state 4
    PASS    shift, and go to state 5
    BREAK   shift, and go to state 6
    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 11
    STRING  shift, and go to state 12
    NOT     shift, and go to state 13

    constant     go to state 16
    term         go to state 17
    expressions  go to state 18
    arith_expr   go to state 19
    bool_expr    go to state 20
    import_stmt  go to state 21
    pass_stmt    go to state 22
    break_stmt   go to state 23
    assign_stmt  go to state 24
    if_stmt      go to state 25
    while_stmt   go to state 26
    basic_stmt   go to state 27
    cmpd_stmt    go to state 28
    statements   go to state 78


State 74

   34 elif_stmts: ELIF . bool_expr COLON start_suite elif_stmts

    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 32
    STRING  shift, and go to state 12
    NOT     shift, and go to state 13

    constant     go to state 16
    term         go to state 17
    expressions  go to state 33
    arith_expr   go to state 19
    bool_expr    go to state 79


State 75

   36 else_stmt: ELSE . COLON start_suite

    COLON  shift, and go to state 80


State 76

   33 if_stmt: IF bool_expr COLON start_suite elif_stmts .

    $default  reduce using rule 33 (if_stmt)


State 77

   35 elif_stmts: else_stmt .

    $default  reduce using rule 35 (elif_stmts)


State 78

   48 start_suite: NEWLINE INDENT statements . suite

    NEWLINE  shift, and go to state 81

    suite  go to state 82


State 79

   10 expressions: bool_expr .
   24 bool_expr: bool_expr . AND bool_expr
   25          | bool_expr . OR bool_expr
   34 elif_stmts: ELIF bool_expr . COLON start_suite elif_stmts

    COLON  shift, and go to state 83
    AND    shift, and go to state 52
    OR     shift, and go to state 53

    $default  reduce using rule 10 (expressions)


State 80

   36 else_stmt: ELSE COLON . start_suite

    NEWLINE  shift, and go to state 69
    IMPORT   shift, and go to state 2
    PASS     shift, and go to state 5
    BREAK    shift, and go to state 6
    TRUE     shift, and go to state 7
    FALSE    shift, and go to state 8
    OP       shift, and go to state 9
    NUMBER   shift, and go to state 10
    ID       shift, and go to state 11
    STRING   shift, and go to state 12
    NOT      shift, and go to state 13

    constant     go to state 16
    term         go to state 17
    expressions  go to state 18
    arith_expr   go to state 19
    bool_expr    go to state 20
    import_stmt  go to state 21
    pass_stmt    go to state 22
    break_stmt   go to state 23
    assign_stmt  go to state 24
    basic_stmt   go to state 70
    start_suite  go to state 84


State 81

   49 suite: NEWLINE . NOCHANGE statements suite
   50      | NEWLINE . end_suite

    NOCHANGE  shift, and go to state 85
    DEDENT    shift, and go to state 86

    $default  reduce using rule 52 (end_suite)

    end_suite  go to state 87


State 82

   48 start_suite: NEWLINE INDENT statements suite .

    $default  reduce using rule 48 (start_suite)


State 83

   34 elif_stmts: ELIF bool_expr COLON . start_suite elif_stmts

    NEWLINE  shift, and go to state 69
    IMPORT   shift, and go to state 2
    PASS     shift, and go to state 5
    BREAK    shift, and go to state 6
    TRUE     shift, and go to state 7
    FALSE    shift, and go to state 8
    OP       shift, and go to state 9
    NUMBER   shift, and go to state 10
    ID       shift, and go to state 11
    STRING   shift, and go to state 12
    NOT      shift, and go to state 13

    constant     go to state 16
    term         go to state 17
    expressions  go to state 18
    arith_expr   go to state 19
    bool_expr    go to state 20
    import_stmt  go to state 21
    pass_stmt    go to state 22
    break_stmt   go to state 23
    assign_stmt  go to state 24
    basic_stmt   go to state 70
    start_suite  go to state 88


State 84

   36 else_stmt: ELSE COLON start_suite .

    $default  reduce using rule 36 (else_stmt)


State 85

   49 suite: NEWLINE NOCHANGE . statements suite

    IMPORT  shift, and go to state 2
    WHILE   shift, and go to state 3
    IF      shift, and go to state 4
    PASS    shift, and go to state 5
    BREAK   shift, and go to state 6
    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 11
    STRING  shift, and go to state 12
    NOT     shift, and go to state 13

    constant     go to state 16
    term         go to state 17
    expressions  go to state 18
    arith_expr   go to state 19
    bool_expr    go to state 20
    import_stmt  go to state 21
    pass_stmt    go to state 22
    break_stmt   go to state 23
    assign_stmt  go to state 24
    if_stmt      go to state 25
    while_stmt   go to state 26
    basic_stmt   go to state 27
    cmpd_stmt    go to state 28
    statements   go to state 89


State 86

   51 end_suite: DEDENT . statements

    IMPORT  shift, and go to state 2
    WHILE   shift, and go to state 3
    IF      shift, and go to state 4
    PASS    shift, and go to state 5
    BREAK   shift, and go to state 6
    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 11
    STRING  shift, and go to state 12
    NOT     shift, and go to state 13

    constant     go to state 16
    term         go to state 17
    expressions  go to state 18
    arith_expr   go to state 19
    bool_expr    go to state 20
    import_stmt  go to state 21
    pass_stmt    go to state 22
    break_stmt   go to state 23
    assign_stmt  go to state 24
    if_stmt      go to state 25
    while_stmt   go to state 26
    basic_stmt   go to state 27
    cmpd_stmt    go to state 28
    statements   go to state 90


State 87

   50 suite: NEWLINE end_suite .

    $default  reduce using rule 50 (suite)


State 88

   34 elif_stmts: ELIF bool_expr COLON start_suite . elif_stmts

    ELIF  shift, and go to state 74
    ELSE  shift, and go to state 75

    elif_stmts  go to state 91
    else_stmt   go to state 77


State 89

   49 suite: NEWLINE NOCHANGE statements . suite

    NEWLINE  shift, and go to state 81

    suite  go to state 92


State 90

   51 end_suite: DEDENT statements .

    $default  reduce using rule 51 (end_suite)


State 91

   34 elif_stmts: ELIF bool_expr COLON start_suite elif_stmts .

    $default  reduce using rule 34 (elif_stmts)


State 92

   49 suite: NEWLINE NOCHANGE statements suite .

    $default  reduce using rule 49 (suite)
