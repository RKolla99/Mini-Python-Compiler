Terminals unused in grammar

   IN
   RETURN
   NE
   OB
   CB


Grammar

    0 $accept: startparse $end

    1 startparse: start ENDFILE

    2 start: NEWLINE start
    3      | statements NEWLINE start
    4      | statements NEWLINE

    5 constant: NUMBER
    6         | STRING

    7 term: ID
    8     | constant

    9 expressions: arith_expr
   10            | bool_expr

   11 arith_expr: term
   12           | arith_expr PL arith_expr
   13           | arith_expr MN arith_expr
   14           | arith_expr ML arith_expr
   15           | arith_expr DV arith_expr
   16           | MN arith_expr
   17           | OP arith_expr CP

   18 bool_term: TRUE
   19          | FALSE
   20          | arith_expr EE arith_expr
   21          | bool_factor

   22 bool_factor: NOT bool_factor
   23            | OP bool_expr CP

   24 bool_expr: arith_expr GT arith_expr
   25          | arith_expr LT arith_expr
   26          | arith_expr GE arith_expr
   27          | arith_expr LE arith_expr
   28          | bool_term AND bool_term
   29          | bool_term OR bool_term
   30          | bool_term

   31 import_stmt: IMPORT ID

   32 pass_stmt: PASS

   33 break_stmt: BREAK

   34 assign_stmt: ID EQL expressions

   35 if_stmt: IF bool_expr COLON start_suite
   36        | IF bool_expr COLON start_suite elif_stmts

   37 elif_stmts: ELIF bool_expr COLON start_suite elif_stmts
   38           | else_stmt

   39 else_stmt: ELSE COLON start_suite

   40 while_stmt: WHILE bool_expr COLON start_suite

   41 basic_stmt: import_stmt
   42           | pass_stmt
   43           | break_stmt
   44           | assign_stmt
   45           | expressions

   46 cmpd_stmt: if_stmt
   47          | while_stmt

   48 statements: basic_stmt
   49           | cmpd_stmt

   50 start_suite: basic_stmt

   51 $@1: %empty

   52 start_suite: NEWLINE INDENT $@1 statements suite

   53 suite: NEWLINE NOCHANGE statements suite
   54      | NEWLINE end_suite

   55 end_suite: DEDENT statements
   56          | %empty


Terminals, with rules where they appear

$end (0) 0
error (256)
NOCHANGE (258) 53
NEWLINE (259) 2 3 4 52 53 54
DEDENT (260) 55
INDENT (261) 52
IMPORT (262) 31
WHILE (263) 40
IF (264) 35 36
ELIF (265) 37
ELSE (266) 39
IN (267)
PASS (268) 32
BREAK (269) 33
RETURN (270)
COLON (271) 35 36 37 39 40
GT (272) 24
LT (273) 25
GE (274) 26
LE (275) 27
EE (276) 20
NE (277)
TRUE (278) 18
FALSE (279) 19
OP (280) 17 23
CP (281) 17 23
OB (282)
CB (283)
NUMBER (284) 5
ID (285) 7 31 34
STRING (286) 6
ENDFILE (287) 1
EQL (288) 34
PL (289) 12
MN (290) 13 16
ML (291) 14
DV (292) 15
NOT (293) 22
AND (294) 28
OR (295) 29
LOWER_THAN_EL (296)


Nonterminals, with rules where they appear

$accept (42)
    on left: 0
startparse (43)
    on left: 1, on right: 0
start (44)
    on left: 2 3 4, on right: 1 2 3
constant (45)
    on left: 5 6, on right: 8
term (46)
    on left: 7 8, on right: 11
expressions (47)
    on left: 9 10, on right: 34 45
arith_expr (48)
    on left: 11 12 13 14 15 16 17, on right: 9 12 13 14 15 16 17 20
    24 25 26 27
bool_term (49)
    on left: 18 19 20 21, on right: 28 29 30
bool_factor (50)
    on left: 22 23, on right: 21 22
bool_expr (51)
    on left: 24 25 26 27 28 29 30, on right: 10 23 35 36 37 40
import_stmt (52)
    on left: 31, on right: 41
pass_stmt (53)
    on left: 32, on right: 42
break_stmt (54)
    on left: 33, on right: 43
assign_stmt (55)
    on left: 34, on right: 44
if_stmt (56)
    on left: 35 36, on right: 46
elif_stmts (57)
    on left: 37 38, on right: 36 37
else_stmt (58)
    on left: 39, on right: 38
while_stmt (59)
    on left: 40, on right: 47
basic_stmt (60)
    on left: 41 42 43 44 45, on right: 48 50
cmpd_stmt (61)
    on left: 46 47, on right: 49
statements (62)
    on left: 48 49, on right: 3 4 52 53 55
start_suite (63)
    on left: 50 52, on right: 35 36 37 39 40
$@1 (64)
    on left: 51, on right: 52
suite (65)
    on left: 53 54, on right: 52 53
end_suite (66)
    on left: 55 56, on right: 54


State 0

    0 $accept: . startparse $end

    NEWLINE  shift, and go to state 1
    IMPORT   shift, and go to state 2
    WHILE    shift, and go to state 3
    IF       shift, and go to state 4
    PASS     shift, and go to state 5
    BREAK    shift, and go to state 6
    TRUE     shift, and go to state 7
    FALSE    shift, and go to state 8
    OP       shift, and go to state 9
    NUMBER   shift, and go to state 10
    ID       shift, and go to state 11
    STRING   shift, and go to state 12
    MN       shift, and go to state 13
    NOT      shift, and go to state 14

    startparse   go to state 15
    start        go to state 16
    constant     go to state 17
    term         go to state 18
    expressions  go to state 19
    arith_expr   go to state 20
    bool_term    go to state 21
    bool_factor  go to state 22
    bool_expr    go to state 23
    import_stmt  go to state 24
    pass_stmt    go to state 25
    break_stmt   go to state 26
    assign_stmt  go to state 27
    if_stmt      go to state 28
    while_stmt   go to state 29
    basic_stmt   go to state 30
    cmpd_stmt    go to state 31
    statements   go to state 32


State 1

    2 start: NEWLINE . start

    NEWLINE  shift, and go to state 1
    IMPORT   shift, and go to state 2
    WHILE    shift, and go to state 3
    IF       shift, and go to state 4
    PASS     shift, and go to state 5
    BREAK    shift, and go to state 6
    TRUE     shift, and go to state 7
    FALSE    shift, and go to state 8
    OP       shift, and go to state 9
    NUMBER   shift, and go to state 10
    ID       shift, and go to state 11
    STRING   shift, and go to state 12
    MN       shift, and go to state 13
    NOT      shift, and go to state 14

    start        go to state 33
    constant     go to state 17
    term         go to state 18
    expressions  go to state 19
    arith_expr   go to state 20
    bool_term    go to state 21
    bool_factor  go to state 22
    bool_expr    go to state 23
    import_stmt  go to state 24
    pass_stmt    go to state 25
    break_stmt   go to state 26
    assign_stmt  go to state 27
    if_stmt      go to state 28
    while_stmt   go to state 29
    basic_stmt   go to state 30
    cmpd_stmt    go to state 31
    statements   go to state 32


State 2

   31 import_stmt: IMPORT . ID

    ID  shift, and go to state 34


State 3

   40 while_stmt: WHILE . bool_expr COLON start_suite

    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 35
    STRING  shift, and go to state 12
    MN      shift, and go to state 13
    NOT     shift, and go to state 14

    constant     go to state 17
    term         go to state 18
    arith_expr   go to state 36
    bool_term    go to state 21
    bool_factor  go to state 22
    bool_expr    go to state 37


State 4

   35 if_stmt: IF . bool_expr COLON start_suite
   36        | IF . bool_expr COLON start_suite elif_stmts

    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 35
    STRING  shift, and go to state 12
    MN      shift, and go to state 13
    NOT     shift, and go to state 14

    constant     go to state 17
    term         go to state 18
    arith_expr   go to state 36
    bool_term    go to state 21
    bool_factor  go to state 22
    bool_expr    go to state 38


State 5

   32 pass_stmt: PASS .

    $default  reduce using rule 32 (pass_stmt)


State 6

   33 break_stmt: BREAK .

    $default  reduce using rule 33 (break_stmt)


State 7

   18 bool_term: TRUE .

    $default  reduce using rule 18 (bool_term)


State 8

   19 bool_term: FALSE .

    $default  reduce using rule 19 (bool_term)


State 9

   17 arith_expr: OP . arith_expr CP
   23 bool_factor: OP . bool_expr CP

    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 35
    STRING  shift, and go to state 12
    MN      shift, and go to state 13
    NOT     shift, and go to state 14

    constant     go to state 17
    term         go to state 18
    arith_expr   go to state 39
    bool_term    go to state 21
    bool_factor  go to state 22
    bool_expr    go to state 40


State 10

    5 constant: NUMBER .

    $default  reduce using rule 5 (constant)


State 11

    7 term: ID .
   34 assign_stmt: ID . EQL expressions

    EQL  shift, and go to state 41

    $default  reduce using rule 7 (term)


State 12

    6 constant: STRING .

    $default  reduce using rule 6 (constant)


State 13

   16 arith_expr: MN . arith_expr

    OP      shift, and go to state 42
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 35
    STRING  shift, and go to state 12
    MN      shift, and go to state 13

    constant    go to state 17
    term        go to state 18
    arith_expr  go to state 43


State 14

   22 bool_factor: NOT . bool_factor

    OP   shift, and go to state 44
    NOT  shift, and go to state 14

    bool_factor  go to state 45


State 15

    0 $accept: startparse . $end

    $end  shift, and go to state 46


State 16

    1 startparse: start . ENDFILE

    ENDFILE  shift, and go to state 47


State 17

    8 term: constant .

    $default  reduce using rule 8 (term)


State 18

   11 arith_expr: term .

    $default  reduce using rule 11 (arith_expr)


State 19

   45 basic_stmt: expressions .

    $default  reduce using rule 45 (basic_stmt)


State 20

    9 expressions: arith_expr .
   12 arith_expr: arith_expr . PL arith_expr
   13           | arith_expr . MN arith_expr
   14           | arith_expr . ML arith_expr
   15           | arith_expr . DV arith_expr
   20 bool_term: arith_expr . EE arith_expr
   24 bool_expr: arith_expr . GT arith_expr
   25          | arith_expr . LT arith_expr
   26          | arith_expr . GE arith_expr
   27          | arith_expr . LE arith_expr

    GT  shift, and go to state 48
    LT  shift, and go to state 49
    GE  shift, and go to state 50
    LE  shift, and go to state 51
    EE  shift, and go to state 52
    PL  shift, and go to state 53
    MN  shift, and go to state 54
    ML  shift, and go to state 55
    DV  shift, and go to state 56

    $default  reduce using rule 9 (expressions)


State 21

   28 bool_expr: bool_term . AND bool_term
   29          | bool_term . OR bool_term
   30          | bool_term .

    AND  shift, and go to state 57
    OR   shift, and go to state 58

    $default  reduce using rule 30 (bool_expr)


State 22

   21 bool_term: bool_factor .

    $default  reduce using rule 21 (bool_term)


State 23

   10 expressions: bool_expr .

    $default  reduce using rule 10 (expressions)


State 24

   41 basic_stmt: import_stmt .

    $default  reduce using rule 41 (basic_stmt)


State 25

   42 basic_stmt: pass_stmt .

    $default  reduce using rule 42 (basic_stmt)


State 26

   43 basic_stmt: break_stmt .

    $default  reduce using rule 43 (basic_stmt)


State 27

   44 basic_stmt: assign_stmt .

    $default  reduce using rule 44 (basic_stmt)


State 28

   46 cmpd_stmt: if_stmt .

    $default  reduce using rule 46 (cmpd_stmt)


State 29

   47 cmpd_stmt: while_stmt .

    $default  reduce using rule 47 (cmpd_stmt)


State 30

   48 statements: basic_stmt .

    $default  reduce using rule 48 (statements)


State 31

   49 statements: cmpd_stmt .

    $default  reduce using rule 49 (statements)


State 32

    3 start: statements . NEWLINE start
    4      | statements . NEWLINE

    NEWLINE  shift, and go to state 59


State 33

    2 start: NEWLINE start .

    $default  reduce using rule 2 (start)


State 34

   31 import_stmt: IMPORT ID .

    $default  reduce using rule 31 (import_stmt)


State 35

    7 term: ID .

    $default  reduce using rule 7 (term)


State 36

   12 arith_expr: arith_expr . PL arith_expr
   13           | arith_expr . MN arith_expr
   14           | arith_expr . ML arith_expr
   15           | arith_expr . DV arith_expr
   20 bool_term: arith_expr . EE arith_expr
   24 bool_expr: arith_expr . GT arith_expr
   25          | arith_expr . LT arith_expr
   26          | arith_expr . GE arith_expr
   27          | arith_expr . LE arith_expr

    GT  shift, and go to state 48
    LT  shift, and go to state 49
    GE  shift, and go to state 50
    LE  shift, and go to state 51
    EE  shift, and go to state 52
    PL  shift, and go to state 53
    MN  shift, and go to state 54
    ML  shift, and go to state 55
    DV  shift, and go to state 56


State 37

   40 while_stmt: WHILE bool_expr . COLON start_suite

    COLON  shift, and go to state 60


State 38

   35 if_stmt: IF bool_expr . COLON start_suite
   36        | IF bool_expr . COLON start_suite elif_stmts

    COLON  shift, and go to state 61


State 39

   12 arith_expr: arith_expr . PL arith_expr
   13           | arith_expr . MN arith_expr
   14           | arith_expr . ML arith_expr
   15           | arith_expr . DV arith_expr
   17           | OP arith_expr . CP
   20 bool_term: arith_expr . EE arith_expr
   24 bool_expr: arith_expr . GT arith_expr
   25          | arith_expr . LT arith_expr
   26          | arith_expr . GE arith_expr
   27          | arith_expr . LE arith_expr

    GT  shift, and go to state 48
    LT  shift, and go to state 49
    GE  shift, and go to state 50
    LE  shift, and go to state 51
    EE  shift, and go to state 52
    CP  shift, and go to state 62
    PL  shift, and go to state 53
    MN  shift, and go to state 54
    ML  shift, and go to state 55
    DV  shift, and go to state 56


State 40

   23 bool_factor: OP bool_expr . CP

    CP  shift, and go to state 63


State 41

   34 assign_stmt: ID EQL . expressions

    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 35
    STRING  shift, and go to state 12
    MN      shift, and go to state 13
    NOT     shift, and go to state 14

    constant     go to state 17
    term         go to state 18
    expressions  go to state 64
    arith_expr   go to state 20
    bool_term    go to state 21
    bool_factor  go to state 22
    bool_expr    go to state 23


State 42

   17 arith_expr: OP . arith_expr CP

    OP      shift, and go to state 42
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 35
    STRING  shift, and go to state 12
    MN      shift, and go to state 13

    constant    go to state 17
    term        go to state 18
    arith_expr  go to state 65


State 43

   12 arith_expr: arith_expr . PL arith_expr
   13           | arith_expr . MN arith_expr
   14           | arith_expr . ML arith_expr
   15           | arith_expr . DV arith_expr
   16           | MN arith_expr .

    ML  shift, and go to state 55
    DV  shift, and go to state 56

    $default  reduce using rule 16 (arith_expr)


State 44

   23 bool_factor: OP . bool_expr CP

    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 35
    STRING  shift, and go to state 12
    MN      shift, and go to state 13
    NOT     shift, and go to state 14

    constant     go to state 17
    term         go to state 18
    arith_expr   go to state 36
    bool_term    go to state 21
    bool_factor  go to state 22
    bool_expr    go to state 40


State 45

   22 bool_factor: NOT bool_factor .

    $default  reduce using rule 22 (bool_factor)


State 46

    0 $accept: startparse $end .

    $default  accept


State 47

    1 startparse: start ENDFILE .

    $default  reduce using rule 1 (startparse)


State 48

   24 bool_expr: arith_expr GT . arith_expr

    OP      shift, and go to state 42
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 35
    STRING  shift, and go to state 12
    MN      shift, and go to state 13

    constant    go to state 17
    term        go to state 18
    arith_expr  go to state 66


State 49

   25 bool_expr: arith_expr LT . arith_expr

    OP      shift, and go to state 42
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 35
    STRING  shift, and go to state 12
    MN      shift, and go to state 13

    constant    go to state 17
    term        go to state 18
    arith_expr  go to state 67


State 50

   26 bool_expr: arith_expr GE . arith_expr

    OP      shift, and go to state 42
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 35
    STRING  shift, and go to state 12
    MN      shift, and go to state 13

    constant    go to state 17
    term        go to state 18
    arith_expr  go to state 68


State 51

   27 bool_expr: arith_expr LE . arith_expr

    OP      shift, and go to state 42
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 35
    STRING  shift, and go to state 12
    MN      shift, and go to state 13

    constant    go to state 17
    term        go to state 18
    arith_expr  go to state 69


State 52

   20 bool_term: arith_expr EE . arith_expr

    OP      shift, and go to state 42
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 35
    STRING  shift, and go to state 12
    MN      shift, and go to state 13

    constant    go to state 17
    term        go to state 18
    arith_expr  go to state 70


State 53

   12 arith_expr: arith_expr PL . arith_expr

    OP      shift, and go to state 42
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 35
    STRING  shift, and go to state 12
    MN      shift, and go to state 13

    constant    go to state 17
    term        go to state 18
    arith_expr  go to state 71


State 54

   13 arith_expr: arith_expr MN . arith_expr

    OP      shift, and go to state 42
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 35
    STRING  shift, and go to state 12
    MN      shift, and go to state 13

    constant    go to state 17
    term        go to state 18
    arith_expr  go to state 72


State 55

   14 arith_expr: arith_expr ML . arith_expr

    OP      shift, and go to state 42
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 35
    STRING  shift, and go to state 12
    MN      shift, and go to state 13

    constant    go to state 17
    term        go to state 18
    arith_expr  go to state 73


State 56

   15 arith_expr: arith_expr DV . arith_expr

    OP      shift, and go to state 42
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 35
    STRING  shift, and go to state 12
    MN      shift, and go to state 13

    constant    go to state 17
    term        go to state 18
    arith_expr  go to state 74


State 57

   28 bool_expr: bool_term AND . bool_term

    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 35
    STRING  shift, and go to state 12
    MN      shift, and go to state 13
    NOT     shift, and go to state 14

    constant     go to state 17
    term         go to state 18
    arith_expr   go to state 75
    bool_term    go to state 76
    bool_factor  go to state 22


State 58

   29 bool_expr: bool_term OR . bool_term

    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 35
    STRING  shift, and go to state 12
    MN      shift, and go to state 13
    NOT     shift, and go to state 14

    constant     go to state 17
    term         go to state 18
    arith_expr   go to state 75
    bool_term    go to state 77
    bool_factor  go to state 22


State 59

    3 start: statements NEWLINE . start
    4      | statements NEWLINE .

    NEWLINE  shift, and go to state 1
    IMPORT   shift, and go to state 2
    WHILE    shift, and go to state 3
    IF       shift, and go to state 4
    PASS     shift, and go to state 5
    BREAK    shift, and go to state 6
    TRUE     shift, and go to state 7
    FALSE    shift, and go to state 8
    OP       shift, and go to state 9
    NUMBER   shift, and go to state 10
    ID       shift, and go to state 11
    STRING   shift, and go to state 12
    MN       shift, and go to state 13
    NOT      shift, and go to state 14

    $default  reduce using rule 4 (start)

    start        go to state 78
    constant     go to state 17
    term         go to state 18
    expressions  go to state 19
    arith_expr   go to state 20
    bool_term    go to state 21
    bool_factor  go to state 22
    bool_expr    go to state 23
    import_stmt  go to state 24
    pass_stmt    go to state 25
    break_stmt   go to state 26
    assign_stmt  go to state 27
    if_stmt      go to state 28
    while_stmt   go to state 29
    basic_stmt   go to state 30
    cmpd_stmt    go to state 31
    statements   go to state 32


State 60

   40 while_stmt: WHILE bool_expr COLON . start_suite

    NEWLINE  shift, and go to state 79
    IMPORT   shift, and go to state 2
    PASS     shift, and go to state 5
    BREAK    shift, and go to state 6
    TRUE     shift, and go to state 7
    FALSE    shift, and go to state 8
    OP       shift, and go to state 9
    NUMBER   shift, and go to state 10
    ID       shift, and go to state 11
    STRING   shift, and go to state 12
    MN       shift, and go to state 13
    NOT      shift, and go to state 14

    constant     go to state 17
    term         go to state 18
    expressions  go to state 19
    arith_expr   go to state 20
    bool_term    go to state 21
    bool_factor  go to state 22
    bool_expr    go to state 23
    import_stmt  go to state 24
    pass_stmt    go to state 25
    break_stmt   go to state 26
    assign_stmt  go to state 27
    basic_stmt   go to state 80
    start_suite  go to state 81


State 61

   35 if_stmt: IF bool_expr COLON . start_suite
   36        | IF bool_expr COLON . start_suite elif_stmts

    NEWLINE  shift, and go to state 79
    IMPORT   shift, and go to state 2
    PASS     shift, and go to state 5
    BREAK    shift, and go to state 6
    TRUE     shift, and go to state 7
    FALSE    shift, and go to state 8
    OP       shift, and go to state 9
    NUMBER   shift, and go to state 10
    ID       shift, and go to state 11
    STRING   shift, and go to state 12
    MN       shift, and go to state 13
    NOT      shift, and go to state 14

    constant     go to state 17
    term         go to state 18
    expressions  go to state 19
    arith_expr   go to state 20
    bool_term    go to state 21
    bool_factor  go to state 22
    bool_expr    go to state 23
    import_stmt  go to state 24
    pass_stmt    go to state 25
    break_stmt   go to state 26
    assign_stmt  go to state 27
    basic_stmt   go to state 80
    start_suite  go to state 82


State 62

   17 arith_expr: OP arith_expr CP .

    $default  reduce using rule 17 (arith_expr)


State 63

   23 bool_factor: OP bool_expr CP .

    $default  reduce using rule 23 (bool_factor)


State 64

   34 assign_stmt: ID EQL expressions .

    $default  reduce using rule 34 (assign_stmt)


State 65

   12 arith_expr: arith_expr . PL arith_expr
   13           | arith_expr . MN arith_expr
   14           | arith_expr . ML arith_expr
   15           | arith_expr . DV arith_expr
   17           | OP arith_expr . CP

    CP  shift, and go to state 62
    PL  shift, and go to state 53
    MN  shift, and go to state 54
    ML  shift, and go to state 55
    DV  shift, and go to state 56


State 66

   12 arith_expr: arith_expr . PL arith_expr
   13           | arith_expr . MN arith_expr
   14           | arith_expr . ML arith_expr
   15           | arith_expr . DV arith_expr
   24 bool_expr: arith_expr GT arith_expr .

    PL  shift, and go to state 53
    MN  shift, and go to state 54
    ML  shift, and go to state 55
    DV  shift, and go to state 56

    $default  reduce using rule 24 (bool_expr)


State 67

   12 arith_expr: arith_expr . PL arith_expr
   13           | arith_expr . MN arith_expr
   14           | arith_expr . ML arith_expr
   15           | arith_expr . DV arith_expr
   25 bool_expr: arith_expr LT arith_expr .

    PL  shift, and go to state 53
    MN  shift, and go to state 54
    ML  shift, and go to state 55
    DV  shift, and go to state 56

    $default  reduce using rule 25 (bool_expr)


State 68

   12 arith_expr: arith_expr . PL arith_expr
   13           | arith_expr . MN arith_expr
   14           | arith_expr . ML arith_expr
   15           | arith_expr . DV arith_expr
   26 bool_expr: arith_expr GE arith_expr .

    PL  shift, and go to state 53
    MN  shift, and go to state 54
    ML  shift, and go to state 55
    DV  shift, and go to state 56

    $default  reduce using rule 26 (bool_expr)


State 69

   12 arith_expr: arith_expr . PL arith_expr
   13           | arith_expr . MN arith_expr
   14           | arith_expr . ML arith_expr
   15           | arith_expr . DV arith_expr
   27 bool_expr: arith_expr LE arith_expr .

    PL  shift, and go to state 53
    MN  shift, and go to state 54
    ML  shift, and go to state 55
    DV  shift, and go to state 56

    $default  reduce using rule 27 (bool_expr)


State 70

   12 arith_expr: arith_expr . PL arith_expr
   13           | arith_expr . MN arith_expr
   14           | arith_expr . ML arith_expr
   15           | arith_expr . DV arith_expr
   20 bool_term: arith_expr EE arith_expr .

    PL  shift, and go to state 53
    MN  shift, and go to state 54
    ML  shift, and go to state 55
    DV  shift, and go to state 56

    $default  reduce using rule 20 (bool_term)


State 71

   12 arith_expr: arith_expr . PL arith_expr
   12           | arith_expr PL arith_expr .
   13           | arith_expr . MN arith_expr
   14           | arith_expr . ML arith_expr
   15           | arith_expr . DV arith_expr

    ML  shift, and go to state 55
    DV  shift, and go to state 56

    $default  reduce using rule 12 (arith_expr)


State 72

   12 arith_expr: arith_expr . PL arith_expr
   13           | arith_expr . MN arith_expr
   13           | arith_expr MN arith_expr .
   14           | arith_expr . ML arith_expr
   15           | arith_expr . DV arith_expr

    ML  shift, and go to state 55
    DV  shift, and go to state 56

    $default  reduce using rule 13 (arith_expr)


State 73

   12 arith_expr: arith_expr . PL arith_expr
   13           | arith_expr . MN arith_expr
   14           | arith_expr . ML arith_expr
   14           | arith_expr ML arith_expr .
   15           | arith_expr . DV arith_expr

    $default  reduce using rule 14 (arith_expr)


State 74

   12 arith_expr: arith_expr . PL arith_expr
   13           | arith_expr . MN arith_expr
   14           | arith_expr . ML arith_expr
   15           | arith_expr . DV arith_expr
   15           | arith_expr DV arith_expr .

    $default  reduce using rule 15 (arith_expr)


State 75

   12 arith_expr: arith_expr . PL arith_expr
   13           | arith_expr . MN arith_expr
   14           | arith_expr . ML arith_expr
   15           | arith_expr . DV arith_expr
   20 bool_term: arith_expr . EE arith_expr

    EE  shift, and go to state 52
    PL  shift, and go to state 53
    MN  shift, and go to state 54
    ML  shift, and go to state 55
    DV  shift, and go to state 56


State 76

   28 bool_expr: bool_term AND bool_term .

    $default  reduce using rule 28 (bool_expr)


State 77

   29 bool_expr: bool_term OR bool_term .

    $default  reduce using rule 29 (bool_expr)


State 78

    3 start: statements NEWLINE start .

    $default  reduce using rule 3 (start)


State 79

   52 start_suite: NEWLINE . INDENT $@1 statements suite

    INDENT  shift, and go to state 83


State 80

   50 start_suite: basic_stmt .

    $default  reduce using rule 50 (start_suite)


State 81

   40 while_stmt: WHILE bool_expr COLON start_suite .

    $default  reduce using rule 40 (while_stmt)


State 82

   35 if_stmt: IF bool_expr COLON start_suite .
   36        | IF bool_expr COLON start_suite . elif_stmts

    ELIF  shift, and go to state 84
    ELSE  shift, and go to state 85

    $default  reduce using rule 35 (if_stmt)

    elif_stmts  go to state 86
    else_stmt   go to state 87


State 83

   52 start_suite: NEWLINE INDENT . $@1 statements suite

    $default  reduce using rule 51 ($@1)

    $@1  go to state 88


State 84

   37 elif_stmts: ELIF . bool_expr COLON start_suite elif_stmts

    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 35
    STRING  shift, and go to state 12
    MN      shift, and go to state 13
    NOT     shift, and go to state 14

    constant     go to state 17
    term         go to state 18
    arith_expr   go to state 36
    bool_term    go to state 21
    bool_factor  go to state 22
    bool_expr    go to state 89


State 85

   39 else_stmt: ELSE . COLON start_suite

    COLON  shift, and go to state 90


State 86

   36 if_stmt: IF bool_expr COLON start_suite elif_stmts .

    $default  reduce using rule 36 (if_stmt)


State 87

   38 elif_stmts: else_stmt .

    $default  reduce using rule 38 (elif_stmts)


State 88

   52 start_suite: NEWLINE INDENT $@1 . statements suite

    IMPORT  shift, and go to state 2
    WHILE   shift, and go to state 3
    IF      shift, and go to state 4
    PASS    shift, and go to state 5
    BREAK   shift, and go to state 6
    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 11
    STRING  shift, and go to state 12
    MN      shift, and go to state 13
    NOT     shift, and go to state 14

    constant     go to state 17
    term         go to state 18
    expressions  go to state 19
    arith_expr   go to state 20
    bool_term    go to state 21
    bool_factor  go to state 22
    bool_expr    go to state 23
    import_stmt  go to state 24
    pass_stmt    go to state 25
    break_stmt   go to state 26
    assign_stmt  go to state 27
    if_stmt      go to state 28
    while_stmt   go to state 29
    basic_stmt   go to state 30
    cmpd_stmt    go to state 31
    statements   go to state 91


State 89

   37 elif_stmts: ELIF bool_expr . COLON start_suite elif_stmts

    COLON  shift, and go to state 92


State 90

   39 else_stmt: ELSE COLON . start_suite

    NEWLINE  shift, and go to state 79
    IMPORT   shift, and go to state 2
    PASS     shift, and go to state 5
    BREAK    shift, and go to state 6
    TRUE     shift, and go to state 7
    FALSE    shift, and go to state 8
    OP       shift, and go to state 9
    NUMBER   shift, and go to state 10
    ID       shift, and go to state 11
    STRING   shift, and go to state 12
    MN       shift, and go to state 13
    NOT      shift, and go to state 14

    constant     go to state 17
    term         go to state 18
    expressions  go to state 19
    arith_expr   go to state 20
    bool_term    go to state 21
    bool_factor  go to state 22
    bool_expr    go to state 23
    import_stmt  go to state 24
    pass_stmt    go to state 25
    break_stmt   go to state 26
    assign_stmt  go to state 27
    basic_stmt   go to state 80
    start_suite  go to state 93


State 91

   52 start_suite: NEWLINE INDENT $@1 statements . suite

    NEWLINE  shift, and go to state 94

    suite  go to state 95


State 92

   37 elif_stmts: ELIF bool_expr COLON . start_suite elif_stmts

    NEWLINE  shift, and go to state 79
    IMPORT   shift, and go to state 2
    PASS     shift, and go to state 5
    BREAK    shift, and go to state 6
    TRUE     shift, and go to state 7
    FALSE    shift, and go to state 8
    OP       shift, and go to state 9
    NUMBER   shift, and go to state 10
    ID       shift, and go to state 11
    STRING   shift, and go to state 12
    MN       shift, and go to state 13
    NOT      shift, and go to state 14

    constant     go to state 17
    term         go to state 18
    expressions  go to state 19
    arith_expr   go to state 20
    bool_term    go to state 21
    bool_factor  go to state 22
    bool_expr    go to state 23
    import_stmt  go to state 24
    pass_stmt    go to state 25
    break_stmt   go to state 26
    assign_stmt  go to state 27
    basic_stmt   go to state 80
    start_suite  go to state 96


State 93

   39 else_stmt: ELSE COLON start_suite .

    $default  reduce using rule 39 (else_stmt)


State 94

   53 suite: NEWLINE . NOCHANGE statements suite
   54      | NEWLINE . end_suite

    NOCHANGE  shift, and go to state 97
    DEDENT    shift, and go to state 98

    $default  reduce using rule 56 (end_suite)

    end_suite  go to state 99


State 95

   52 start_suite: NEWLINE INDENT $@1 statements suite .

    $default  reduce using rule 52 (start_suite)


State 96

   37 elif_stmts: ELIF bool_expr COLON start_suite . elif_stmts

    ELIF  shift, and go to state 84
    ELSE  shift, and go to state 85

    elif_stmts  go to state 100
    else_stmt   go to state 87


State 97

   53 suite: NEWLINE NOCHANGE . statements suite

    IMPORT  shift, and go to state 2
    WHILE   shift, and go to state 3
    IF      shift, and go to state 4
    PASS    shift, and go to state 5
    BREAK   shift, and go to state 6
    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 11
    STRING  shift, and go to state 12
    MN      shift, and go to state 13
    NOT     shift, and go to state 14

    constant     go to state 17
    term         go to state 18
    expressions  go to state 19
    arith_expr   go to state 20
    bool_term    go to state 21
    bool_factor  go to state 22
    bool_expr    go to state 23
    import_stmt  go to state 24
    pass_stmt    go to state 25
    break_stmt   go to state 26
    assign_stmt  go to state 27
    if_stmt      go to state 28
    while_stmt   go to state 29
    basic_stmt   go to state 30
    cmpd_stmt    go to state 31
    statements   go to state 101


State 98

   55 end_suite: DEDENT . statements

    IMPORT  shift, and go to state 2
    WHILE   shift, and go to state 3
    IF      shift, and go to state 4
    PASS    shift, and go to state 5
    BREAK   shift, and go to state 6
    TRUE    shift, and go to state 7
    FALSE   shift, and go to state 8
    OP      shift, and go to state 9
    NUMBER  shift, and go to state 10
    ID      shift, and go to state 11
    STRING  shift, and go to state 12
    MN      shift, and go to state 13
    NOT     shift, and go to state 14

    constant     go to state 17
    term         go to state 18
    expressions  go to state 19
    arith_expr   go to state 20
    bool_term    go to state 21
    bool_factor  go to state 22
    bool_expr    go to state 23
    import_stmt  go to state 24
    pass_stmt    go to state 25
    break_stmt   go to state 26
    assign_stmt  go to state 27
    if_stmt      go to state 28
    while_stmt   go to state 29
    basic_stmt   go to state 30
    cmpd_stmt    go to state 31
    statements   go to state 102


State 99

   54 suite: NEWLINE end_suite .

    $default  reduce using rule 54 (suite)


State 100

   37 elif_stmts: ELIF bool_expr COLON start_suite elif_stmts .

    $default  reduce using rule 37 (elif_stmts)


State 101

   53 suite: NEWLINE NOCHANGE statements . suite

    NEWLINE  shift, and go to state 94

    suite  go to state 103


State 102

   55 end_suite: DEDENT statements .

    $default  reduce using rule 55 (end_suite)


State 103

   53 suite: NEWLINE NOCHANGE statements suite .

    $default  reduce using rule 53 (suite)
